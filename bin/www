#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
const confUtils = require("../utils/config-utils");
const path = require("path");
const config = require("../config");
const pwd = process.env.PWD ? path.join(process.env.PWD) : path.join(process.cwd());

const pName = confUtils.getPkgName();
var debug = require("debug")(`${pName}:server`);
var http = require("http");
const websocket = require("../utils/websocket");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8888");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
if (config.enableWebsocket) {
  websocket.initialiseWebsocket(server);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(err) {
  if (err.syscall !== "listen") {
    throw err;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (err.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw err;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// * Utils initializer 
const { initUtils } = require("../utils/initUtils")
initUtils();

module.exports = app;
